{"version":3,"file":"libTypes.js","sourceRoot":"","sources":["libTypes.ts"],"names":[],"mappings":"AAAA;;;;;;;;;EASE;AACF,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAA;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AAQ/C;;GAEG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,SAAS,CAAY,QAAQ,CAAC,CAAA;AAEnD,eAAe,KAAK,CAAA","sourcesContent":["/*\n|--------------------------------------------------------------------------\n|\n| 组件类型导出文件，同时也作为 rollup 的打包入口文件，因只提供类型，rollup 打包后是一个\n| 仅包含 hel-lib-proxy 的空壳文件，对模块使用方的包体构建大小无影响\n| 模块使用方 通过 npm i xxx-lib 后，只要在头文件处执行过 preFetchLib\n| 则整个项目项使用本地模块一样载入提供方的组件，并可以点击到 node_modules 查看源码\n|\n|--------------------------------------------------------------------------\n*/\nimport { exposeLib } from 'hel-lib-proxy'\nimport { LIB_NAME } from '../configs/subApp.ts'\n\nexport type CompTypes = {\n  App: {\n    name: string\n  }\n}\n\n/**\n * 将提供给用户的lib暴露出去（同时也暴露了类型）\n */\nexport const dtlib = exposeLib<CompTypes>(LIB_NAME)\n\nexport default dtlib\n"]}